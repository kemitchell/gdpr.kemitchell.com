#!/usr/bin/env node
const deepEqual = require('deep-equal')
const escape = require('escape-html')
const gdpr = require('./gdpr')
const romanize = require('romanize')

const WHITE_FLAG = '\u2690'

const header = `<!doctype html>
<html>
<head>
<meta charset=UTF-8>
<title>GDPR Annotated</title>
<link rel=stylesheet href=styles.css>
</head>
<body>
<header>
<h1>GDPR Annotated</h1>
${renderContents()}
</header>
`

console.log(header)

function renderContents () {
  return `
    <ol class=toc>
      <li><a href=#recitals>Recitals</a></li>
      ${gdpr.text.map(nodeContents).join('')}
      <li><a href=#notes>Notes</a></li>
    </ol>
  `
}

function nodeContents (node, above) {
  above = Array.isArray(above) ? above : []
  if (node.title) {
    if (node.type === 'article') {
      return `
        <li>
          Article ${node.number}.
          <a href=#article-${node.number}>${escape(node.title)}</a>
        </li>
      `
    } else {
      const identifier = node.type === 'chapter'
        ? 'chapter-' + romanize(node.number)
        : node.type + '-' + node.number
      const id = above.concat(identifier).join('-')
      return `
        <li>
          ${capitalize(node.type)} ${node.number}.
          <a href=#${id}>${escape(node.title)}</a>
          <ol>
            ${node.text.map(function (element) {
              return nodeContents(element, above.concat(identifier))
            }).join('')}
          </ol>
        </li>
      `
    }
  }
}

console.log(`
<section id=recitals>
<h1>Recitals</h1>
<button class=toggle>Show/Hide</button>
<ol>
${
gdpr.recitals
.map(function (recital, index) {
  const number = index + 1
  const id = 'recital-' + number
  const simple = !recital.text.some(function (element) {
    return element.text && Array.isArray(element.text)
  })
  if (simple) {
    return `<li id=${id}><p>${renderText(recital.text)}</p></li>`
  } else {
    return `<li id=${id}>` +
    recital.text.map(function (element) {
      return '<p>' + renderText(element.text) + '</p>'
    }).join('') +
    '</li>'
  }
})
.join('\n')
}
</ol>
</section>
`)

function renderNote (note) {
  return `<a href=#note-${note.note}>Note ${note.note}</a>`
}

function renderEM (em) {
  return `<em>${escape(em.em)}</em>`
}

const ORDINALS = [
  'first',
  'second',
  'third',
  'fourth',
  'fifth'
]

function renderReference (reference) {
  let href
  let text
  if (reference.article) {
    href = 'article-' + reference.article
    text = 'Article ' + reference.article
    if (reference.paragraph) {
      href += '-paragraph-' + reference.paragraph
      text += '(' + reference.paragraph + ')'
    }
    if (reference.subparagraph) {
      href += '-subparagraph-' + reference.subparagraph
      text = 'the ' + ORDINALS[reference.subparagraph] + ' subparagraph of ' + text
    }
    if (reference.point) {
      const parsed = parseInt(reference.point)
      if (isNaN(parsed)) {
        href += '-point-' + String.fromCharCode(96 + reference.point)
      } else {
        href += '-point-' + reference.point
      }
      text = 'point (' + reference.point + ') of ' + text
    }
  } else if (reference.chapter) {
    href = 'chapter-' + romanize(reference.chapter)
    text = 'Chapter ' + romanize(reference.chapter)
  }
  let returned = `<a href=#${href}>${escape(reference.text || text)}</a>`
  if (reference.title) {
    returned += '&nbsp;(' + escape(reference.title) + ')'
  }
  return returned
}

function capitalize (string) {
  return string[0].toUpperCase() + string.slice(1)
}

console.log(`<main>${gdpr.text.map(renderNode).join('')}</main>`)

function renderNode (node, above) {
  above = Array.isArray(above) ? above : []
  const type = node.type
  if (type === 'chapter') {
    const identifier = 'chapter-' + romanize(node.number)
    const id = above.concat(identifier).join('-')
    return `
    <section id=${id} class=chapter>
      <h1>${escape(node.title)}</h1>
      ${node.text.map(function (element) {
        return renderNode(element, above.concat(identifier))
      }).join('')}
      ${renderTags()}
      ${renderRecitalLinks()}
    </section>
    `
  } else if (type === 'section') {
    const identifier = 'section-' + node.number
    const id = above.concat(identifier).join('-')
    return `
    <section id=${id} class=section>
      <h1>${escape(node.title)}</h1>
      ${node.text.map(function (element) {
        return renderNode(element, above.concat(identifier))
      }).join('')}
      ${renderTags()}
      ${renderRecitalLinks()}
    </section>
    `
  } else if (type === 'paragraph' || type === 'subparagraph') {
    const identifier = type + '-' + node.number
    const id = type === 'paragraph'
      ? above.slice(-1).concat(identifier).join('-')
      : above.slice(-2).concat(identifier).join('-')
    return (
      `<section id=${id} class=${type}>` +
      renderParagraphText(
        node.text, type === 'paragraph'
          ? above.concat(identifier)
          : above
      ) +
      renderTags() +
      renderRecitalLinks() +
      '</section>'
    )
  } else if (type === 'article') {
    const id = 'article-' + node.number
    return `
    <section id=${id} class=article>
      <h1>${escape(node.title)}</h1>
      ${node.text.map(function (element) {
        return renderNode(element, above.concat(id))
      }).join('')}
      ${renderTags()}
      ${renderRecitalLinks()}
    </section>
    `
  } else if (type === 'preamble') {
    return `<p class=preamble>${renderText(node.text)}</p>`
  } else if (type === 'point') {
    const identifier = 'point-' + node.number
    const id = above.slice(-2).concat(identifier).join('-')
    return `
      <li class=point id=${id}>
        <p>${renderText(node.text)}</p>
        ${renderTags()}
        ${renderRecitalLinks()}
      </li>
    `
  }

  function renderTags () {
    if (!Array.isArray(node.tags)) return ''
    return `
      <ul class=tags>
        ${node.tags.sort().map(function (tag) {
          return `<li>${WHITE_FLAG}&nbsp;<a href="#tag:${termToID(tag)}">${escape(tag)}</a></li>`
        }).join('')}
      </ul>
    `
  }
  function renderRecitalLinks () {
    if (!Array.isArray(node.recitals)) return ''
    return `
      <ul class=recitalLinks>
        ${node.recitals.sort().map(function (recital) {
          return `
          <li>
            <a href="#recital-${recital}">Recital ${recital}</a>
          </li>
          `
        }).join('')}
      </ul>
    `
  }
}

function renderParagraphText (text, above) {
  return text.map(function (element, index) {
    let returned
    if (element.type) {
      returned = renderNode(element, above)
      if (element.type === 'point') {
        const previous = text[index - 1]
        if (!previous || previous.type !== 'point') {
          returned = '<ol>' + returned
        }
        const next = text[index + 1]
        if (index === text.length - 1 || (next && next.type !== 'point')) {
          returned = returned + '</ol>'
        }
      }
    } else {
      returned = renderText([element])
    }
    return returned
  }).join('')
}

console.log(`
<section id=notes>
<h1>Notes</h1>
<ol>
${
gdpr.notes
.map(function (note) {
  const number = note.number
  const text = note.text
  const id = 'note-' + number
  if (typeof text === 'string') {
    return `<li id=${id}><p>${escape(text)}</p></li>`
  } else {
    return `<li id=${id}><p>` + renderText(text) + '</p></li>'
  }
})
.join('\n')
}
</ol>
</section>
`)

const tagIndex = {}

function findTags (node, above) {
  above = Array.isArray(above) ? above : []
  const here = above
    .concat({ key: node.type, value: node.number })
  if (node.title) {
    here.push({ key: 'title', value: node.title })
  }
  if (Array.isArray(node.tags)) {
    node.tags.forEach(function (tag) {
      if (tagIndex[tag]) add(tagIndex[tag], here)
      else tagIndex[tag] = [here]
    })
  }
  if (Array.isArray(node.text)) {
    node.text.forEach(function (element) {
      findTags(element, here)
    })
  }
}

gdpr.text.forEach(findTags)

console.log(`
<section id=tags>
<h1>Index</h1>
<dl>
${Object.keys(tagIndex).sort().map(function (tag) {
  const links = tagIndex[tag]
  return `
  <dt id="tag:${termToID(tag)}">${WHITE_FLAG}&nbsp;${escape(tag)}</dt>
  <dd>
    <ul>
      ${links.map(function (link) {
        const reference = link
          .reduce(function (reference, element) {
            reference[element.key] = element.value
            return reference
          }, {})
        if (reference.article) {
          delete reference.chapter
          delete reference.section
        }
        return `<li>${renderReference(reference)}</li>`
      }).join('')}
    </ul>
  </dd>
  `
}).join('')}
</dl>
</section>
`)

function renderText (text) {
  return text.map(element => {
    if (typeof element === 'string') {
      return escape(element)
    } else if (element.note) {
      return renderNote(element)
    } else if (element.em) {
      return renderEM(element)
    } else if (
      element.chapter ||
      element.article
    ) {
      return renderReference(element)
    } else if (element.term) {
      return renderTerm(element)
    } else if (element.concept) {
      return renderConcept(element)
    } else if (element.definition) {
      return renderDefinition(element)
    } else {
      return ''
    }
  }).join('')
}

const termIndex = {}

function findDefinitions (node, above) {
  above = Array.isArray(above) ? above : []
  const here = above
    .concat({ key: node.type, value: node.number })
  if (node.title) {
    here.push({ key: 'title', value: node.title })
  }
  if (node.definition) {
    termIndex[node.definition] = here
  }
  if (Array.isArray(node.text)) {
    node.text.forEach(function (element) {
      findDefinitions(element, here)
    })
  }
}

gdpr.text.forEach(findDefinitions)

console.log(`
<section id=terms>
<h1>Terms</h1>
<dl>
${Object.keys(termIndex).sort().map(function (term) {
  const link = termIndex[term]
  const reference = link
    .reduce(function (reference, element) {
      reference[element.key] = element.value
      return reference
    }, {})
  if (reference.article) {
    delete reference.chapter
    delete reference.section
  }
  return `
  <dt>${renderTerm({ term })}</dt>
  <dd>${renderReference(reference)}</dd>
  `
}).join('')}
</dl>
</section>
`)

const conceptIndex = {}

function findConcepts (node, above) {
  above = Array.isArray(above) ? above : []
  const here = above
    .concat({ key: node.type, value: node.number })
  if (node.title) {
    here.push({ key: 'title', value: node.title })
  }
  if (node.concept) {
    const concept = node.concept
    if (conceptIndex[concept]) add(conceptIndex[concept], here)
    else conceptIndex[concept] = [here]
  }
  if (Array.isArray(node.text)) {
    node.text.forEach(function (element) {
      findConcepts(element, here)
    })
  }
}

function add (set, item) {
  if (set.some(function (element) {
    return deepEqual(element, item)
  })) return
  set.push(item)
}

gdpr.text.forEach(findConcepts)

console.log(`
<section id=concepts>
<h1>Concepts</h1>
<dl>
${Object.keys(conceptIndex).sort().map(function (concept) {
  const links = conceptIndex[concept]
  return `
  <dt id="concept:${termToID(concept)}">${escape(concept)}</dt>
  <dd>
    <ul>
      ${links.map(function (link) {
        const reference = link
          .reduce(function (reference, element) {
            reference[element.key] = element.value
            return reference
          }, {})
        if (reference.article) {
          delete reference.chapter
          delete reference.section
        }
        return `<li>${renderReference(reference)}</li>`
      }).join('')}
    </ul>
  </dd>
  `
}).join('')}
</dl>
</section>
`)

function renderTerm (term) {
  return `<a class=defined href="#definition:${termToID(term.term)}">${escape(term.text || term.term)}</a>`
}

function renderConcept (concept) {
  return `<a class=concept href="#concept:${termToID(concept.concept)}">${escape(concept.text || concept.concept)}</a>`
}

function renderDefinition (arg) {
  const term = arg.definition
  return `<a class=definition id="definition:${termToID(term)}">'${escape(arg.text || term)}'</a>`
}

function termToID (term) {
  return encodeURIComponent(term.replace(/ /g, '_'))
}

const footer = '<script src=script.js></script></body></html>'
console.log(footer)
